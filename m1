from config import jira_client, bq_client, instance_client
from google.cloud import compute_v1

def instance_exists(project_id, instance_id):
    request = compute_v1.AggregatedListInstancesRequest(project=project_id)
    agg_list = instance_client.aggregated_list(request=request)

    for zone, response in agg_list:
        if response.instances:
            for instance in response.instances:
                if str(instance.id) == instance_id:
                    return True
    return False

def strike_inactive_ids(description, ids_str, inactive_ids):
    for vid in inactive_ids:
        idx = description.find(vid)
        if idx == -1:
            continue
        start = max(0, idx - 6)
        end = description.find("â€“", idx)
        if end == -1:
            end = len(description)
        old_description = description[start:end]
        new_description = old_description.strip().replace("\n", "-\r\n-")
        new_description = "*{color:#218845} RESOLVED{color}*\r\n-" + new_description + "-"
        description = description.replace(old_description, new_description)
        ids_str = ids_str.replace(vid + "\n", "").replace(vid, "")
    return description, ids_str

def scan_open_tickets():
    print("scanning open tickets...")

    query = (
        'project = GCPSREOPS AND status in ("Waiting for support", "Waiting for Customer", Pending, "In Progress") '
        'AND "Path to Green" is not EMPTY AND component = "gcp-platform-warnings"'
    )

    open_tickets = jira_client.search_issues(query)
    if not open_tickets:
        print("no open tickets found!")
        return True

    print(f"found {len(open_tickets)} open tickets")

    for ticket in open_tickets:
        ticket_id = ticket.key
        details = jira_client.issue(ticket_id)

        violation_ids_field = details.fields.customfield_26907
        project_id_field = details.fields.customfield_36100

        if not violation_ids_field or not project_id_field:
            continue

        violation_ids = violation_ids_field.strip().split("\n")
        project_id = project_id_field.strip()
        inactive_ids = []
        active_found = False

        for vid in violation_ids:
            try:
                raw_id = vid.strip()
                if raw_id.startswith("instance_"):
                    instance_id = raw_id.split("instance_")[1]
                else:
                    instance_id = raw_id
                if not instance_exists(project_id, instance_id):
                    inactive_ids.append(raw_id)
                else:
                    active_found = True
            except Exception as e:
                print(f"Skipping {vid} due to error: {e}")
                continue

        if inactive_ids:
            updated_description, updated_ids = strike_inactive_ids(
                details.fields.description, violation_ids_field, inactive_ids
            )

            jira_client.issue(ticket_id).update(fields={
                "description": updated_description,
                "customfield_26907": updated_ids
            })

        if not active_found:
            print(f"closing ticket {ticket_id}")
            jira_client.add_comment(ticket_id, "All violations resolved. Closing the ticket.")
            jira_client.transition_issue(ticket_id, "Resolve this issue", resolution={"name": "Done"})

    return True

if __name__ == "__main__":
    try:
        scan_open_tickets()
        print("GCPSREOPS-alerts-scanner = 0")
    except Exception as e:
        print(e)
        print("GCPSREOPS-alerts-scanner = 1")




import json
from config import jira_client, bq_client  # adjust import if needed

def scan_image_age_tickets():
    print("Scanning tickets for resolved image violations...")

    query = (
        'project = GCPSREOPS AND status in ("Waiting for support", "Waiting for Customer", Pending, "In Progress") '
        'AND component = "GCP:PlatformViolations" AND summary ~ "ImageOlderThanAllowed"'
    )
    open_tickets = jira_client.search_issues(query)

    if not open_tickets:
        print("No open tickets found.")
        return

    id_ticket_map = {}
    all_ticket_details = {}
    ids_list = []

    for ticket in open_tickets:
        ticket_id = ticket.key
        ticket_details = jira_client.issue(ticket_id)
        ids_str = ticket_details.fields.customfield_26907

        if not ids_str:
            continue

        ids = ids_str.strip().split("\n")
        id_ticket_map[ticket_id] = ids
        all_ticket_details[ticket_id] = ticket_details
        ids_list.extend(ids)

    if not ids_list:
        print("No violation IDs found in tickets.")
        return

    # Query BQ for active violations
    id_str = ",".join([f"'{i}'" for i in ids_list])
    query = f"""
        SELECT id FROM `your_project.dataset.totalviolationshds_v2`
        WHERE id IN ({id_str}) AND active = TRUE AND controlId IS NULL
    """
    results = bq_client.query_and_wait(query=query)
    active_violation_ids = [str(row.id) for row in results]

    # Process each ticket
    for ticket_id, ids in id_ticket_map.items():
        print(f"Processing ticket {ticket_id}")
        inactive_ids = []
        pending = False

        for v_id in ids:
            if v_id not in active_violation_ids:
                inactive_ids.append(v_id)
            else:
                pending = True

        if inactive_ids:
            ticket_details = all_ticket_details[ticket_id]
            description = ticket_details.fields.description
            ids_str = ticket_details.fields.customfield_26907

            updated_description, updated_ids_str = strike_inactive_ids(description, ids_str, inactive_ids)

            ticket_details.update(fields={
                "description": updated_description,
                "customfield_26907": updated_ids_str
            })

        if not pending:
            print(f"Closing ticket {ticket_id}")
            jira_client.add_comment(ticket_id, "All violations have been resolved. Closing the ticket.")
            jira_client.transition_issue(ticket_id, "Resolve this issue", resolution={"name": "Done"})

def strike_inactive_ids(description, ids_str, inactive_ids):
    for v_id in inactive_ids:
        start = description.find(v_id)
        if start == -1:
            continue
        start -= 6  # Go back to start of separator
        end = description.find("\u2013", start + 1)
        if end == -1:
            end = len(description)

        old_block = description[start:end]
        new_block = old_block.strip().replace("\n", "-\r\n-")
        new_block = f"(color:#218845) RESOLVED (color)\r\n{new_block}"
        description = description.replace(old_block, new_block)

        ids_str = ids_str.replace(v_id + "\n", "").replace(v_id, "")

    return description, ids_str

# To run directly
if __name__ == "__main__":
    try:
        scan_image_age_tickets()
        print("ImageAge scanner completed.")
    except Exception as e:
        print(f"Error: {e}")




from config import ALERT_FOR_VIOLATIONS
import json

# Scanner class for the violation
from computeInstanceOlder import ComputeInstanceImageOlderThanAllowedScanner

def main():
    # Loop through all violations in ALERT_FOR_VIOLATIONS
    for violation_type, projects in ALERT_FOR_VIOLATIONS.items():
        # For each violation, decide what scanner to use
        if violation_type == "computeInstanceImageOlderThanAllowed":
            scanner_class = ComputeInstanceImageOlderThanAllowedScanner
        
        # For each project associated with this violation
        for project_id in projects:
            # Initialize the scanner for the given project
            scanner = scanner_class(project_id)
            details = scanner.get_details()

            if not details:
                print(f"No instances to process for project {project_id}.")
                continue

            print(f"\nProject Details for {project_id}:")
            print(json.dumps(details, indent=4))

            # Process violations for this project
            scanner.get_violations(details)
