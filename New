from config import *
from common import *
from google.cloud import bigquery, compute_v1

class computeInstanceImageOlderThanAllowed:

    def __init__(self, project_id):
        self.project_id = project_id
        print("successfully initialized")

    def get_details(self):
        try:
            request = compute_v1.AggregatedListInstancesRequest(project=self.project_id)
            response = instance_client.aggregated_list(request=request)
            found_instances = False
            details = []

            for zone, instances_scoped_list in response:
                if instances_scoped_list.instances:
                    found_instances = True
                    zone = zone.split('/')[-1]
                    for instance in instances_scoped_list.instances:
                        instance_data = {
                            "instance_name": instance.name,
                            "instance_id": str(instance.id),
                            "instance_creation_time": instance.creation_timestamp,
                            "disks": []
                        }
                        for disk in instance.disks:
                            if disk.boot and disk.source:
                                try:
                                    disk_name = disk.source.split('/')[-1]
                                    if '/regions/' in disk.source:
                                        region = disk.source.split('/regions/')[-1].split('/')[0]
                                        disk_info = regional_disk_client.get(project=self.project_id, disk=disk_name)
                                    else:
                                        disk_info = disk_client.get(project=self.project_id, zone=zone, disk=disk_name)
                                    source_image = getattr(disk_info, "source_image", None)
                                    if source_image:
                                        image_name = source_image.split('/')[-1]
                                        image_info = image_client.get(project=self.project_id, image=image_name)
                                        disk_data = {
                                            "disk_name": disk.device_name,
                                            "disk_creation_time": disk_info.creation_timestamp,
                                            "image_name": image_name,
                                            "image_id": str(image_info.id),
                                            "image_creation_time": image_info.creation_timestamp
                                        }
                                        instance_data["disks"].append(disk_data)
                                except Exception as e:
                                    print("Error fetching disk or image info:", str(e))
                        details.append(instance_data)

            if not found_instances:
                print("No instances found")
            return details

        except Exception as e:
            print("Error fetching instance details:", str(e))
            return []

    def get_violations(self, details, instance_age_limit, image_age_limit):
        violation_details = []

        for detail in details:
            instance_creation_time = parse_rfc3339(detail["instance_creation_time"])
            disk_creation_time = parse_rfc3339(detail["disk_creation_time"])
            image_creation_time = parse_rfc3339(detail["image_creation_time"])

            if (instance_creation_time <= instance_age_limit or
                    disk_creation_time <= image_age_limit or
                    image_creation_time <= image_age_limit):
                violation = {
                    "violation_id": f"{detail['instance_id']}-{detail['disk_name']}",
                    "instance_name": detail["instance_name"],
                    "instance_id": detail["instance_id"],
                    "image_name": detail["image_name"],
                    "image_id": detail["image_id"]
                }
                violation_details.append(violation)

        if violation_details:
            print("\nViolations found:")
            for violation in violation_details:
                print(f"\nViolation details: {{")
                print(f"violation id: {violation['violation_id']}")
                print(f"instance name: {violation['instance_name']}, instance id: {violation['instance_id']}")
                print(f"image name: {violation['image_name']}, image id: {violation['image_id']}")
                print(f"}}")
        else:
            print("No violations found.")
